From JQEURY.COM

There are 2 types of methods in jquery: ran on objects (they return and send 'this' object always)
and utility methods (ran on '$'). Their return types and in params are vary.


document ready - we need to run the code inside this function, in order to give browser an
oppotunity to load all frames and elements.

$( document ).ready(function() {
    console.log( "ready!" );
});

also it has a shorthand:

$(function() {
    console.log( "ready!" );
});

You can pass a normal function (instead of anonymous function)

$( document ).ready( readyFn );
// or:
$( window ).load( readyFn );


To avoid possible conflicts with other libraries pass '$' as parameter to anonymous function.

jQuery( document ).ready(function( $ ) {
// You can use the locally-scoped $ in here as an alias to jQuery.
$( "div" ).hide();
});


with help of attr() method we can either get or set value of the element depending on number of
params;



$( "a" ).attr( "href", "allMyHrefsAreTheSameNow.html" );
$( "a" ).attr({
title: "all titles are the same too!",
href: "somethingNew.html"
});


You can SELECT with:

-id $( "#myId" ); // Note IDs must be unique per page
-class $( ".myClass" );
- $( "input[name='first_name']" ); // Beware, this can be very slow in older browsers
- by compound css selector  $( "#contents ul.people li" );
- pseudo selectors
$( "a.external:first" );
$( "tr:odd" );
// Select all input-like elements in a form (more on this below).
$( "#myForm :input" );
$( "div:visible" );
// All except the first three divs.
$( "div:gt(2)" );
// All currently animated divs.
$( "div:animated" );


jQuery doesn't cache elements for you. If you've made a selection that you might need to make again,
you should save the selection in a variable rather than making the selection repeatedly.

var divs = $( "div" );


Sometimes the selection contains more than what you're after. jQuery offers several methods for refining and filtering selections.

// Refining selections.
$( "div.foo" ).has( "p" ); // div.foo elements that contain <p> tags
$( "h1" ).not( ".bar" ); // h1 elements that don't have a class of bar
$( "ul li" ).filter( ".current" ); // unordered list items with class of current
$( "ul li" ).first(); // just the first unordered list item
$( "ul li" ).eq( 5 ); // the sixth


To select form elements:
$( "form :button" );

$( "form :disabled" );
In order to get the best performance using :disabled, first select elements with a standard jQuery selector,
then use .filter( ":disabled" ), or precede the pseudo-selector with a tag name or some other selector.




// The .html() method used as a setter:
$( "h1" ).html( "hello world" );

// The .html() method used as a getter:
$( "h1" ).html();

Setters return a jQuery object, allowing you to continue calling jQuery methods on your selection.
Getters return whatever they were asked to get, so you can't continue to call jQuery methods on the
value returned by the getter.


Chaining
$( "#content" ).find( "h3" ).eq( 2 ).html( "new text for the third h3!" );

jQuery also provides the .end() method to get back to the original selection should you change
the selection in the middle of a chain:

$( "#content" )
.find( "h3" )
.eq( 2 )
.html( "new text for the third h3!" )
.end() // Restores the selection to all h3s in #content
.eq( 0 )
.html( "new text for the first h3!" );


Methods which allow to change or get values of elements:

    .html() – Get or set the HTML contents.
    .text() – Get or set the text contents; HTML will be stripped.
    .attr() – Get or set the value of the provided attribute.
    .width() – Get or set the width in pixels of the first element in the selection as an integer.
    .height() – Get or set the height in pixels of the first element in the selection as an integer.
    .position() – Get an object with position information for the first element in the selection,
    relative to its first positioned ancestor. This is a getter only.
    .val() – Get or set the value of form elements.





